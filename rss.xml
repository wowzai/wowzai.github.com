<?xml version="1.0"?>
<rss version="2.0">  <channel>
    <title>Wowzai&#39;s Blog</title>
    <link>http://wowzai.com</link>
    <pubDate>28 Jun 14 23:18 CST</pubDate>
    <item>
      <title>关于最近</title>
      <link>http://wowzai.com/2014/2014-my-life-06.html</link>
      <pubDate>2014-06-28 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;最近工作很忙，哦，不，是一直以来工作都是很忙，好像一直都没有喘气的机会，自己心里总是想着这次把手头上的事情做完了可以好好休息一小段时间，调整调整，但是好像一直都没有机会喘口气，就这样一直忙呀忙，但是好像又什么都没有忙出来，瞎忙啊。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;去年的这个时候，涛哥离职了，说实话挺触动我的，我就在想我哪一天会从这个办公室走出去，可能再也不会走回来。转眼一年的时间过去了，工作强度似乎不减反增，除了周五，几乎每天都加班。每天手上有很多事情。忙碌的工作，一件事情做的不好，心里都不好受，但是又不可避免，心里压力好大。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;繁忙的对我最大的影响是记忆力下降，脑子记不住事情了，最明显的是水杯总是忘了，要么忘了盛水，要么是盛水了忘了带回来，还有就是脑子跟不上，总是两眼发呆，脑子感觉是空的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;工作似乎陷入了一个恶性循环，事情越多&amp;ndash;&amp;gt;手忙脚乱&amp;ndash;&amp;gt;心理压力大&amp;ndash;&amp;gt;忙中出错&amp;ndash;&amp;gt;事情越多，好像没有时间来好好梳理梳理，有个周末，惰性加一些乱七八糟的事情两天很快就过去了。然后周一又重复上一周的工作。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;由于工作占用了我的大部分时间，再加上自己的时间管理差，导致我自己的计划无法开展开来，生活变得有一点点糟糕。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;一年的时间很快，眼看着涛哥离开，一年内自己想学的东西基本上一样都没有学成，明年的现在，我又能达到期望中的我百分之多少呢，同时合同也将到期，我还会留在这里嘛？ 天知道。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;哎，就是发发牢骚，其实心里挺难过的。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Oracle中的执行计划</title>
      <link>http://wowzai.com/2014/oracle-explain-plan-1.html</link>
      <pubDate>2014-06-27 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;##Oracle中的执行计划&lt;/p&gt;&#xA;&#xA;&lt;p&gt;由于工作的关系，最近准备系统的学习一下Oracle相关知识，尤其是优化方面的东西，因为工作中可能会碰到性能问题，所以需要准备学习一下这方面的知识。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;讲到Oracle的性能优化，首先想到的就是Oracle中的优化器。众所周知，Oracle中的优化器有RBO和CBO，由于RBO机会没有什么实际用处，这里就不赘述。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;CBO中用到的两个概念：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;集的势&lt;/strong&gt;&lt;br /&gt;&#xA;Cardinlity表示对目标SQL的某个具体执行步骤的执行结果所包含记录数的估算，如果是针对整个目标SQL，那么此时的Cardinality就表示对该SQL最终执行结果所包含记录数的估算。&#xA;一般情况下某个执行步骤对应的Cardinality的值越大，其所对应的成本值往往也就越大，这个执行步骤所在执行路径的总成本值也就会越大。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;可选择率&lt;/strong&gt;&lt;br /&gt;&#xA;Selectivity = 施加指定谓词条件后返回结果集的记录数/未施加任何谓词条件的原始结果集记录数&lt;/p&gt;&#xA;&#xA;&lt;p&gt;补充：Cardinlity和Selectivity对于性能的影响&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;访问数据的方法&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;访问表的方法&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全表扫描： 从表所占用的第一区的第一块开始扫描，直到高水位。需要注意的是高水位并不会因为数据被delete了而降低，就像河中的水位线一样，即使退水了，留在岸上的水位线还在哪里，不会因此而降低（关于如何消除高水位，这又是另外一个问题了，后面再作讨论）。&lt;/li&gt;&#xA;&lt;li&gt;ROWID扫描：直接通过数据所在的ROWID定位并访问数据&lt;br /&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据用户输入的ROWID值去访问（较少）&lt;/li&gt;&#xA;&lt;li&gt;根据访问索引后的ROWID再回表访问对应的数据行记录（较多）&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;访问索引的方法&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;索引唯一扫描：仅针对唯一索引的等值查找（=），即where条件中是唯一索引列的等值查询&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;索引范围扫描：唯一索引的范围查找（&amp;lt;、&amp;gt;、between等），非唯一索引where条件没有限制（不管是等值查询还是范围查询）&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;索引全扫描：非空索引列的查询，查找是从最左边的叶子块的第一行，然后利用叶子块之间的双向指针链表，从左往右扫描索引块的索引行。因此索引全扫描是有序的，并且按照索引的键值列来排序，即走索引全扫描能达到排序的结果，同时避免对该索引键值列的真正排序操作。&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;索引快速扫描：与索引全扫描相似，都适用于所有类型的B树索引（包括唯一性索引和非唯一性索引），扫描目标索引的所有叶子块的所有索引行。索引快速全扫描与索引全扫描有三点区别：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;索引快速全扫描只适用于CBO&lt;/li&gt;&#xA;&lt;li&gt;索引快速全扫描可以使用多块读，也可以并行执行&lt;/li&gt;&#xA;&lt;li&gt;索引快速全扫描执行结果不一定有序，因为此时是根据索引行所在的磁盘上的物理存储顺序扫描的，而不是根据索引行的逻辑顺序扫描的，所以扫描结果不一定有序（单个索引叶子块其物理顺序和逻辑顺序是一致的，但对于物理存储位置相邻的索引叶子块而言，块与块之间索引行的物理存储顺序不一定在逻辑上有序）。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;索引跳跃式扫描：对于那些where条件中没有对索引的前导列指定查询条件但同时又对该索引的非前导列指定了查询条件的目标SQL，就像在扫描该索引时跳过了它的前导列，直接从该索引的非前导列开始扫描一样（世界并非如此）。&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;前导列的distinct值较少，非前导列的选择性好的情况。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>Windows下查看端口和进程绑定</title>
      <link>http://wowzai.com/2014/Windows下查看端口和进程绑定.html</link>
      <pubDate>2014-06-26 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;&lt;a style=&#34;display: block;&#34; name=&#34;windows下查看端口和进程绑定&#34; href=&#34;#windows下查看端口和进程绑定&#34;&gt;&lt;/a&gt;Windows下查看端口和进程绑定&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;最近准备开始学习Android开发，昨晚在用Eclipse开发，准备在模拟器上面跑程序的时候，报8700端口已经被绑定了，我很奇怪，心想难道是其他程序把8700端口给占用了？ 但是我还不知道如何查是哪个程序将8700端口占用了。于是上网查了一下如何查看端口和进程的绑定情况，这里做个记录，以备后忘，哈哈。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.netstat -ano | findstr &amp;ldquo;8700&amp;rdquo;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;TCP     127.0.0.1：8700      0.0.0.0：0       LISTENING       6988&lt;/p&gt;&#xA;&#xA;&lt;p&gt;其中最后一列的6988是对应进程的PID，然后再通过tasklist命令查找那个进程是6988&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.tasklist | findstr &amp;ldquo;6988&amp;rdquo;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;eclipse.exe     6988    Console         1       388,448K&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这样通过简单的两个命令就能找出哪个程序将8700端口给占用了。这里，我可能不小心开了两个eclipse，导致第一个已经占用了8700端口，后面一个试图获得8700端口时就会报错。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>我的第一篇Blog</title>
      <link>http://wowzai.com/2014/new-born.html</link>
      <pubDate>2014-05-15 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;我的第一篇Blog&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&amp;ndash;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我的第一篇blog,new born!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;加油吧，少年！&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>